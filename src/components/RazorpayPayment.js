'use client';

import { useEffect, useRef, useState } from 'react';

export default function RazorpayPayment({ 
  amount, 
  customerInfo, 
  onSuccess, 
  onError,
  isLoading = false
}) {
  const razorpayInitialized = useRef(false);
  const razorpayInstance = useRef(null);
  const [razorpayKey, setRazorpayKey] = useState('');

  useEffect(() => {
    // Fetch Razorpay configuration
    const fetchRazorpayConfig = async () => {
      try {
        const response = await fetch('/api/razorpay/config');
        const data = await response.json();
        
        if (data.success) {
          setRazorpayKey(data.data.keyId);
        } else {
          // Fallback to environment variable
          setRazorpayKey(process.env.NEXT_PUBLIC_RAZORPAY_KEY_ID || 'rzp_test_1DP5mmOlF5G5ag');
        }
      } catch (error) {
        console.error('Error fetching Razorpay config:', error);
        // Fallback to environment variable
        setRazorpayKey(process.env.NEXT_PUBLIC_RAZORPAY_KEY_ID || 'rzp_test_1DP5mmOlF5G5ag');
      }
    };

    fetchRazorpayConfig();
  }, []);

  useEffect(() => {
    // Don't initialize until we have the key
    if (!razorpayKey) return;
    
    // Prevent multiple initializations
    if (razorpayInitialized.current || razorpayInstance.current) {
      return;
    }
    razorpayInitialized.current = true;
    const loadRazorpay = () => {
      return new Promise((resolve) => {
        const script = document.createElement('script');
        script.src = 'https://checkout.razorpay.com/v1/checkout.js';
        script.onload = () => resolve(true);
        script.onerror = () => resolve(false);
        document.body.appendChild(script);
      });
    };

    const displayRazorpay = async () => {
      const res = await loadRazorpay();
      
      if (!res) {
        onError('Razorpay SDK failed to load. Please check your internet connection.');
        return;
      }

      const options = {
        key: razorpayKey,
        amount: amount * 100, // Convert to paise
        currency: 'INR',
        name: 'Santa Di Hatti',
        description: 'Food Order Payment',
        image: '/logo.png', // Add your logo
        order_id: '', // Will be generated by server
        handler: function (response) {
          // Close the Razorpay modal
          if (razorpayInstance.current) {
            razorpayInstance.current.close();
            razorpayInstance.current = null;
          }
          if (window.currentRazorpayInstance) {
            window.currentRazorpayInstance = null;
          }
          // Call the success callback
          onSuccess(response);
        },
        prefill: {
          name: customerInfo.name,
          email: customerInfo.email,
          contact: customerInfo.phone || ''
        },
        notes: {
          address: customerInfo.carNumber || '',
          order_type: 'food_delivery'
        },
        theme: {
          color: '#007BFF'
        },
        modal: {
          ondismiss: function() {
            onError('Payment cancelled by user');
          }
        },
        callback_url: typeof window !== 'undefined' ? `${window.location.origin}/api/razorpay/callback` : undefined
      };

      const razorpay = new window.Razorpay(options);
      
      // Store the instance in ref and globally
      razorpayInstance.current = razorpay;
      window.currentRazorpayInstance = razorpay;
      
      razorpay.open();
    };

    displayRazorpay();

    // Cleanup function
    return () => {
      if (razorpayInstance.current) {
        razorpayInstance.current.close();
        razorpayInstance.current = null;
      }
      if (window.currentRazorpayInstance) {
        window.currentRazorpayInstance = null;
      }
    };
  }, [razorpayKey]); // Run when razorpayKey changes

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-8 max-w-md w-full mx-4">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <h3 className="text-lg font-semibold text-gray-800 mb-2">
            {isLoading ? 'Creating Order...' : 'Processing Payment'}
          </h3>
          <p className="text-gray-600">
            {isLoading 
              ? 'Please wait while we create your order...' 
              : 'Please complete the payment in the popup window'
            }
          </p>
        </div>
      </div>
    </div>
  );
}
